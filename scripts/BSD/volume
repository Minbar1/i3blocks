#!/bin/sh
# Copyright (C) 2014 Julien Bonjean <julien@bonjean.info>
# Copyright (C) 2014 Alexander Keller <github@nycroth.com>
# Copyright (C) 2017 Thierry Ghelew <tlux@ghelew.net>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#------------------------------------------------------------------------

# NOTE: This script has been tested only with sound devices
# installed in kernelspace

# The first parameter sets the step to change the volume by
STEP="${1:-5}"

# The second parameter sets the MUTE label
MUTE="${2:-MUTE}"

# The third parameter sets the $_command label
MLABEL="${3}"

# Name of the $_command to control.
# Generally it's one of:
#FreeBSD vol ,pcm ,speaker ,line ,mic ,mix ,rec ,igain ,ogain
#OpenBSD outputs.master

if [ `uname -s` = "FreeBSD" ]; then
    MIXER=${BLOCK_INSTANCE:-vol}
elif [ `uname -s` = "OpenBSD" ]; then
    MIXER=${BLOCK_INSTANCE:-outputs.master}
fi
#------------------------------------------------------------------------

_command=mixer
if [ `uname -s` = "OpenBSD" ]; then
    _command=mixerctl
fi

mixer_level() {
    if [ `uname -s` = "FreeBSD" ]; then
        $_command -S $1 | awk -F : '{print $2}'
    elif [ `uname -s` = "OpenBSD" ]; then
        $_command -n $1 | awk -F , '{print $1}'
    fi
}


# mute input device: + to unmute; - to mute
mute() {
    local sign=${1:-+}
    if [ `uname -s` = "OpenBSD" ]; then
        if [ $sign = - ]; then
            $_command -q outputs.master.mute=on
        else
            $_command -q outputs.master.mute=off
        fi
    elif [ `uname -s` = "FreeBSD" ]; then
        $_command pcm ${sign}100 >/dev/null 2>&1
    fi
}

# mute default input channel pcm
mute_toggle() {

    if [ `uname -s` = "FreeBSD" ]; then
        if [ `mixer_level pcm` -ge 100 ]; then
            mute -
        else
            mute +
        fi
    elif [ `uname -s` = "OpenBSD" ]; then
        $_command -qt ${MIXER}.mute
    fi
}

volume_set() {
    local sign=${1:-+}
    local level,current
    if [ `uname -s` = "FreeBSD" ]; then
        $_command $MIXER ${sign}${STEP}
    elif [ `uname -s` = "OpenBSD" ]; then
        current=`mixer_level $MIXER`
        if [ $sign = - ]; then
            level=$(echo "${current}-${STEP}" | bc)
        else
            level=$(echo "${current}+${STEP}" | bc)
        fi
        $_command $MIXER=$level
    fi
}

volume() {
    if [ `uname -s` = "FreeBSD" ]; then
        $_command -S ${MIXER} | awk -F : -v mlabel=${MLABEL} -v pcm_level=`mixer_level pcm` -v mute=${MUTE} '{
            if ( pcm_level <= 0 )
            print mute
            else
            if ($2 != $3)
            printf("%s [%s:%s]",mlabel, $2, $3)
            else
            printf("%s %s",mlabel,$2)

        }'
    elif [ `uname -s` = "OpenBSD" ]; then
        $_command -qn ${MIXER} | awk -F , -v mlabel=${MLABEL} -v mute_level=`mixer_level ${MIXER}.mute` -v mute=${MUTE} '{
            if ( mute_level == "on" )
            print mute
            else
            if ($1 != $2)
            printf("%s [%d:%d]",mlabel, $1, $2)
            else
            printf("%s %d",mlabel,$1/255 * 100)

        }'
    fi

}

#------------------------------------------------------------------------

case $BLOCK_BUTTON in
  3) mute_toggle ;;  # right click, mute/unmute
  4) mute +; volume_set + >/dev/null 2>&1 ;; # scroll up, increase
  5) mute +; volume_set - >/dev/null 2>&1 ;; # scroll down, decrease
esac

volume
